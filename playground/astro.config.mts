import { createResolver, defineIntegration } from 'astro-integration-kit';
import { hmrIntegration } from 'astro-integration-kit/dev';
import { defineConfig } from 'astro/config';

const { default: dtsBuilder } = await import('@matthiesenxyz/astrodtsbuilder');

const testIntegration = defineIntegration({
	name: 'testingAndDemoIntegration',
	setup() {
		// Import and use the function
		const dts = dtsBuilder();

		// Add a note to the file
		dts.addSingleLineNote(`This file was generated by '@matthiesenxyz/astrodtsbuilder'`);

		// Add a module with a default export and single line description
		dts.addModule('example:module', {
			defaultExport: {
				typeDef: "import('@my-example/module').ExampleModule",
				singleLineDescription: 'This is the default Module',
			},
		});

		const demoDTS = dts.makeAstroInjectedType('demo.d.ts');

		return {
			hooks: {
				'astro:config:setup': ({ logger }) => {
					logger.info('Hello from the testingAndDemoIntegration!');
				},
				'astro:config:done': ({ injectTypes }) => {
					injectTypes(demoDTS);
				},
			},
		};
	},
});

// https://astro.build/config
export default defineConfig({
	integrations: [
		testIntegration(),
		hmrIntegration({
			directory: createResolver(import.meta.url).resolve('../package/dist'),
		}),
	],
});
